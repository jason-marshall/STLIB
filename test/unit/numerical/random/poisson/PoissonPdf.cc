// -*- C++ -*-

#include "stlib/numerical/random/poisson/PoissonPdf.h"

#include <iostream>

using namespace stlib;

int
main()
{
  {
    std::cout << "Tests for a range of indices for each mean.\n";

    const double Means[] = {0,
                            1e-8, 1e-8, 1e-8,
                            1e-7, 1e-7, 1e-7,
                            1e-6, 1e-6, 1e-6,
                            1e-5, 1e-5, 1e-5,
                            1e-4, 1e-4, 1e-4,
                            1e-3, 1e-3, 1e-3,
                            1e-2, 1e-2, 1e-2,
                            1e-1, 1e-1, 1e-1,
                            1e0, 1e0, 1e0,
                            1e1, 1e1, 1e1,
                            1e2, 1e2, 1e2,
                            1e3, 1e3, 1e3,
                            1e4, 1e4, 1e4,
                            1e5, 1e5, 1e5,
                            1e6, 1e6, 1e6
                           };
    const int NumberOfMeans = sizeof(Means) / sizeof(double);
    const int Indices[] = {0, // 0
                           0, 1, 2, // 1e-8
                           0, 1, 2, // 1e-7
                           0, 1, 2, // 1e-6
                           0, 1, 2, // 1e-5
                           0, 1, 2, // 1e-4
                           0, 1, 2, // 1e-3
                           0, 1, 2, // 1e-2
                           0, 1, 2, // 1e-1
                           0, 1, 2, // 1e0
                           0, 10, 20, // 1e1
                           0, 100, 200, // 1e2
                           0, 1000, 2000, // 1e3
                           0, 10000, 20000, // 1e4
                           0, 100000, 200000, // 1e5
                           0, 1000000, 2000000
                          };// 1e6
    assert(sizeof(Indices) / sizeof(int) == NumberOfMeans);
#if 0
    const double Pdf[] = {1.,
                          0.99999999000000005, 9.9999999000000005e-9, 4.99999995000000025e-17,
                          0.999999900000005, 9.99999900000005e-8, 4.999999500000025e-15,
                          0.99999900000049999983, 9.9999900000049999983e-7, 4.9999950000024999992e-13,
                          0.99999000004999983333, 9.9999000004999983333e-6, 4.9999500002499991667e-11,
                          0.9999000049998333375, 0.00009999000049998333375, 4.9995000249991666875e-9,
                          0.99900049983337499167, 0.00099900049983337499167, 4.9950024991668749583e-7,
                          0.99004983374916805357, 0.0099004983374916805357, 0.000049502491687458402679,
                          0.90483741803595957316, 0.090483741803595957316, 0.0045241870901797978658,
                          0.3678794411714423216, 0.3678794411714423216, 0.1839397205857211608,
                          0.000045399929762484851536, 0.12511003572113329898, 0.0018660813139987595219,
                          3.720075976020835963e-44, 0.039860996809147135234, 4.7169706027926173994e-19,
                          5.0759588975494567653e-435, 0.012614611348721499718, 1.5306205776187484791e-170,
                          1.1354838653147360985e-4343, 0.0039893895589628256487, 6.2416442417095541978e-1681,
                          3.5629495653093731211e-43430, 0.0012615652097053005629, 2.508721293189909492e-16780,
                          3.296831478088558579e-434295, 0.0003989422471562440297, 8.7291174978349480594e-167770
                         };
#else
    const double Pdf[] = {
      1.,
      0.99999999000000005, 9.9999999000000005e-9, 4.99999995000000025e-17,
      0.999999900000005, 9.99999900000005e-8, 4.999999500000025e-15,
      0.99999900000049999983, 9.9999900000049999983e-7, 4.9999950000024999992e-13,
      0.99999000004999983333, 9.9999000004999983333e-6, 4.9999500002499991667e-11,
      0.9999000049998333375, 0.00009999000049998333375, 4.9995000249991666875e-9,
      0.99900049983337499167, 0.00099900049983337499167, 4.9950024991668749583e-7,
      0.99004983374916805357, 0.0099004983374916805357, 0.000049502491687458402679,
      0.90483741803595957316, 0.090483741803595957316, 0.0045241870901797978658,
      0.3678794411714423216, 0.3678794411714423216, 0.1839397205857211608,
      0.000045399929762484851536, 0.12511003572113329898, 0.0018660813139987595219,
      3.720075976020835963e-44, 0.039860996809147135234, 4.7169706027926173994e-19,
      0, 0.012614611348721499718, 1.5306205776187484791e-170,
      0, 0.0039893895589628256487, 0,
      0, 0.0012615652097053005629, 0,
      0, 0.0003989422471562440297, 0
    };
#endif
    assert(sizeof(Pdf) / sizeof(double) == NumberOfMeans);

    numerical::PoissonPdf<> f;
    double value, relativeDifference;
    for (int i = 0; i != NumberOfMeans; ++i) {
      value = f(Means[i], Indices[i]);
      if (value != 0) {
        relativeDifference = (value - Pdf[i]) / value;
      }
      else {
        relativeDifference = 0;
      }
      std::cout << "Mean = " << Means[i]
                << ", index = " << Indices[i]
                << ", PDF = " << value
                << ", rel. diff. = " << relativeDifference << "\n";
    }
  }


  {
    std::cout << "PoissonPdf.txt\n";
    std::cout << "# Relative error for index = floor(mean).\n";

    const double Means[] = {1e-8,
                            1e-7,
                            1e-6,
                            1e-5,
                            1e-4,
                            1e-3,
                            1e-2,
                            1e-1,
                            1e0,
                            1e1,
                            1e2,
                            1e3,
                            1e4,
                            1e5,
                            1e6
                           };
    const int NumberOfMeans = sizeof(Means) / sizeof(double);
    const int Indices[] = {0, // 1e-8
                           0, // 1e-7
                           0, // 1e-6
                           0, // 1e-5
                           0, // 1e-4
                           0, // 1e-3
                           0, // 1e-2
                           0, // 1e-1
                           1, // 1e0
                           10, // 1e1
                           100, // 1e2
                           1000, // 1e3
                           10000, // 1e4
                           100000, // 1e5
                           1000000
                          };// 1e6
    assert(sizeof(Indices) / sizeof(int) == NumberOfMeans);
    const double Pdf[] = {0.99999999000000005,
                          0.999999900000005,
                          0.99999900000049999983,
                          0.99999000004999983333,
                          0.9999000049998333375,
                          0.99900049983337499167,
                          0.99004983374916805357,
                          0.90483741803595957316,
                          0.3678794411714423216,
                          0.12511003572113329898,
                          0.039860996809147135234,
                          0.012614611348721499718,
                          0.0039893895589628256487,
                          0.0012615652097053005629,
                          0.0003989422471562440297
                         };
    assert(sizeof(Pdf) / sizeof(double) == NumberOfMeans);

    numerical::PoissonPdf<> f;
    double value, relativeDifference;
    for (int i = 0; i != NumberOfMeans; ++i) {
      value = f(Means[i], Indices[i]);
      if (value != 0) {
        relativeDifference = (value - Pdf[i]) / value;
      }
      else {
        relativeDifference = 0;
      }
      std::cout << Means[i] << " " << value << " " << relativeDifference
                << "\n";
    }
  }

  return 0;
}
