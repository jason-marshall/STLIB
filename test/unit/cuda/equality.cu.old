// -*- C++ -*-

#include "cuda/equality.h"
#include "cuda/check.h"

#include <cassert>

__device__
bool
areEqual() {
   if (! numerical::areEqual(0., 0.)) {
      return false;
   }
   return true;
}


__global__
void
test(bool* result) {
   bool r = true;
   r &= areEqual();
   *result = r;
}


using numerical::areEqual;
using numerical::areSequencesEqual;
using numerical::areEqualAbs;
using numerical::areSequencesEqualAbs;
using numerical::isSmall;

template<typename _T>
void
testAreEqual() {
   const _T Eps = std::numeric_limits<_T>::epsilon();
   {
      _T x = 1;
      _T y = 1 + Eps;
      _T t = 0.5;
      assert(areEqual(x, y));
      assert(! areEqual(x, y, t));
      y = 1 + 4 * Eps;
      assert(! areEqual(x, y));
      x = Eps;
      y = x * (1 + Eps);
      assert(areEqual(x, y));
      y = 4 * Eps;
      assert(! areEqual(x, y));
      x = 0;
      y = 3 * Eps;
      assert(! areEqual(x, y));

      x = std::numeric_limits<_T>::max();
      y = x * (1 - Eps);
      assert(areEqual(x, y));
      y = x * (1 - 4 * Eps);
      assert(! areEqual(x, y));

      x = std::numeric_limits<_T>::min();
      y = x * (1 + Eps);
      assert(areEqual(x, y));
      y = x + 3 * Eps;
      assert(! areEqual(x, y));
   }
   {
      const _T dataX[] = {0, 1};
      const _T* x = dataX;
      assert(areSequencesEqual(x, x + 2, x));
      const _T dataY[] = {1, 1};
      const _T* y = dataY;
      assert(! areSequencesEqual(x, x + 2, y));
   }
   {
      const std::tr1::array<_T, 2> x = {{0, 1}};
      assert(areEqual(x, x));
      const std::tr1::array<_T, 2> y = {{1, 1}};
      assert(! areEqual(x, y));
   }
}

template<typename _T>
void
testAreEqualAbs() {
   const _T Eps = std::numeric_limits<_T>::epsilon();
   {
      _T x = 1;
      _T y = 1 + Eps;
      const _T s = 1;
      const _T t = 0.5;
      assert(areEqualAbs(x, y));
      assert(! areEqualAbs(x, y, s, t));
      y = 1 + 4 * Eps;
      assert(! areEqualAbs(x, y));
      x = Eps;
      y = x * (1 + Eps);
      assert(areEqualAbs(x, y));

      x = std::numeric_limits<_T>::max();
      y = x * (1 - Eps);
      assert(! areEqualAbs(x, y));
      assert(areEqualAbs(x, y, std::numeric_limits<_T>::max()));

      x = std::numeric_limits<_T>::min();
      y = x * (1 + Eps);
      assert(areEqualAbs(x, y));
   }
   {
      const _T dataX[] = {0, 1};
      const _T* x = dataX;
      assert(areSequencesEqualAbs(x, x + 2, x));
      const _T dataY[] = {1, 1};
      const _T* y = dataY;
      assert(! areSequencesEqualAbs(x, x + 2, y));
   }
   {
      const std::tr1::array<_T, 2> x = {{0, 1}};
      assert(areEqualAbs(x, x));
      const std::tr1::array<_T, 2> y = {{1, 1}};
      assert(! areEqualAbs(x, y));
   }
}

template<typename _T>
void
testIsSmall() {
   const _T Eps = std::numeric_limits<_T>::epsilon();
   _T x = Eps;
   assert(isSmall(x));
   _T t = 0.5;
   assert(! isSmall(x, t));
   x = 2 * Eps;
   assert(! isSmall(x));
}

int
main() {
   //---------------------------------------------------------------------------
   // CUDA
   bool result;
   bool* resultDev;
   CUDA_CHECK(cudaMalloc((void**)&resultDev, sizeof(bool)));
   test<<<1, 1>>>(resultDev);
   CUDA_CHECK(cudaMemcpy(&result, resultDev, sizeof(bool),
                         cudaMemcpyDeviceToHost));
   assert(result);

   testAreEqual<double>();
   testAreEqual<float>();
   testAreEqualAbs<double>();
   testAreEqualAbs<float>();
   testIsSmall<double>();
   testIsSmall<float>();

   return 0;
}
