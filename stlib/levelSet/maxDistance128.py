import math
import random

def squaredDistance(x, y):
    return (x[0] - y[0]) * (x[0] - y[0]) + \
           (x[1] - y[1]) * (x[1] - y[1]) + \
           (x[2] - y[2]) * (x[2] - y[2])

def normalized(x):
    im = 1. / math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2])
    return (x[0]*im, x[1]*im, x[2]*im)

def randomUnitVector():
    x = (random.random(), random.random(), random.random())
    return normalized(x)

points = [(1.000000, 0.000000, 0.000000),
  (-0.100178, -0.132708, 0.986080),
  (0.527860, -0.797204, -0.292966),
  (-0.681458, 0.716127, -0.150921),
  (0.808253, -0.450189, 0.379549),
  (0.938093, -0.324487, -0.121205),
  (0.338903, 0.881010, -0.330100),
  (0.654904, 0.751996, 0.074854),
  (0.614773, -0.472751, 0.631316),
  (-0.690916, 0.564967, -0.451051),
  (-0.478825, -0.213047, -0.851668),
  (-0.677503, -0.598623, -0.427364),
  (-0.830714, 0.552303, 0.069828),
  (-0.735601, -0.493743, 0.463798),
  (0.070052, -0.621294, -0.780440),
  (0.950942, 0.280593, 0.130295),
  (0.443244, 0.126885, 0.887375),
  (0.272255, -0.136046, 0.952559),
  (0.762374, -0.605779, -0.227637),
  (-0.210105, -0.435392, -0.875380),
  (0.940876, 0.256064, -0.221775),
  (0.363955, -0.882335, 0.298365),
  (-0.039121, -0.868779, -0.493653),
  (0.815958, 0.321436, 0.480512),
  (0.810254, -0.186686, 0.555552),
  (0.070876, -0.385249, 0.920087),
  (0.175858, 0.767853, -0.616016),
  (-0.181322, -0.137580, -0.973753),
  (-0.727273, -0.661153, 0.184260),
  (0.497223, 0.673031, -0.547538),
  (-0.863315, -0.358938, -0.354754),
  (-0.760950, 0.016080, 0.648611),
  (-0.678893, 0.330244, 0.655777),
  (-0.176284, 0.971899, 0.156001),
  (0.826069, -0.557347, 0.083516),
  (-0.832425, 0.258152, -0.490332),
  (-0.151140, 0.174949, -0.972908),
  (0.021692, -0.987924, -0.153413),
  (-0.978154, 0.106339, -0.178623),
  (-0.502953, -0.742363, 0.442647),
  (-0.083814, 0.872414, 0.481527),
  (0.026707, 0.926448, -0.375475),
  (0.588658, -0.594880, -0.547357),
  (0.387560, 0.921770, -0.011718),
  (-0.378192, 0.843199, 0.382082),
  (0.807745, 0.537170, 0.242892),
  (-0.638302, 0.729799, 0.244875),
  (0.397613, -0.147730, -0.905583),
  (0.930109, 0.048387, 0.364082),
  (-0.608289, 0.351238, -0.711770),
  (-0.212745, -0.698626, -0.683126),
  (0.582554, 0.370187, 0.723596),
  (0.821818, 0.217038, -0.526792),
  (-0.880476, 0.419843, -0.220211),
  (-0.452442, 0.109267, -0.885074),
  (-0.196881, 0.811592, -0.550052),
  (0.378929, 0.612255, 0.693943),
  (0.613102, 0.065860, -0.787254),
  (-0.706910, 0.025163, -0.706856),
  (0.243729, -0.902984, -0.353859),
  (0.300886, -0.737867, -0.604169),
  (0.756025, 0.505444, -0.415875),
  (0.597328, 0.388101, -0.701838),
  (-0.485490, -0.534736, 0.691634),
  (0.607396, -0.793446, 0.038894),
  (-0.221583, -0.471843, 0.853385),
  (0.844019, 0.527665, -0.095924),
  (-0.985600, -0.050636, 0.161334),
  (-0.226505, -0.972342, 0.056969),
  (0.801179, -0.092582, -0.591220),
  (0.084054, -0.658647, 0.747742),
  (-0.467388, 0.883703, 0.024858),
  (0.724343, 0.083215, 0.684400),
  (-0.239145, 0.953050, -0.185755),
  (-0.652729, -0.269837, 0.707907),
  (0.363126, -0.475063, -0.801533),
  (-0.553707, 0.617715, 0.558424),
  (-0.493190, -0.514636, -0.701365),
  (0.620977, 0.616296, 0.484320),
  (-0.818424, -0.564638, -0.106617),
  (0.312675, 0.534197, -0.785409),
  (0.230714, 0.822219, 0.520314),
  (0.103836, -0.320423, -0.941566),
  (-0.970632, -0.216242, -0.105418),
  (-0.524828, 0.084646, 0.846989),
  (0.463349, 0.830050, 0.310362),
  (0.073530, -0.979179, 0.189212),
  (0.247402, 0.395456, 0.884537),
  (0.086328, -0.862964, 0.497836),
  (-0.089543, 0.425750, 0.900400),
  (0.950771, -0.233510, 0.203732),
  (-0.877086, -0.202142, 0.435727),
  (-0.800428, 0.461169, 0.382934),
  (-0.284656, -0.925202, -0.250944),
  (0.074537, 0.378153, -0.922738),
  (-0.219608, -0.901257, 0.373507),
  (-0.958550, 0.266991, 0.099486),
  (0.375995, -0.712136, 0.592866),
  (0.567453, -0.183200, 0.802767),
  (-0.495148, -0.858704, 0.132121),
  (0.076928, 0.994501, -0.071060),
  (-0.214867, -0.733263, 0.645103),
  (-0.463992, 0.811041, -0.356263),
  (0.132622, 0.012046, -0.991093),
  (0.147787, 0.959987, 0.237875),
  (-0.715638, -0.292017, -0.634499),
  (-0.435343, 0.628391, -0.644672),
  (-0.407900, 0.413888, 0.813827),
  (0.615885, -0.702632, 0.356363),
  (0.818003, -0.375965, -0.435340),
  (-0.424193, -0.774479, -0.469300),
  (-0.906100, -0.388478, 0.167538),
  (-0.265369, 0.677970, 0.685519),
  (0.096267, 0.136505, 0.985951),
  (-0.400174, -0.206556, 0.892858),
  (0.047179, 0.663072, 0.747067),
  (-0.242232, 0.148232, 0.958828),
  (-0.587087, -0.793651, -0.159521),
  (0.617792, 0.748078, -0.242306),
  (0.334279, -0.942074, -0.027465),
  (-0.064796, 0.626610, -0.776635),
  (0.362219, -0.452572, 0.814847),
  (-0.895769, -0.052697, -0.441384),
  (0.618522, -0.311825, -0.721246),
  (-0.305122, 0.426964, -0.851236),
  (-0.900618, 0.158187, 0.404800),
  (0.364718, 0.220268, -0.904689),
  (0.947559, -0.060110, -0.313877)]

maxDistance = 0
for i in range(100000):
    x = randomUnitVector()
    d = 1e10
    for p in points:
        d = min(squaredDistance(x, p), d)
    maxDistance = max(maxDistance, d)
maxDistance = math.sqrt(maxDistance)
print('%s points. max distance = %s' % (len(points), maxDistance))
# 128 points. max distance = 0.222233188262

